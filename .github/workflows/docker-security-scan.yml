name: Docker Security Scan

# 触发条件：在 main 分支的 push 和 pull request 时触发
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  trivy-scan:
    runs-on: ubuntu-latest  # 使用 Ubuntu 最新版本作为运行环境

    steps:
    # Step 1: 检出仓库代码
    - name: Checkout code
      uses: actions/checkout@v4  # 使用兼容 Node.js 20 的最新版本

    # Step 2: 登录 Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3  # 使用兼容 Node.js 20 的最新版本
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 用户名（从 GitHub Secrets 中读取）
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 密码（从 GitHub Secrets 中读取）

    # Step 3: 设置 Docker Buildx（用于多平台构建）
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # 使用兼容 Node.js 20 的最新版本

    # Step 4: 构建 Docker 镜像
    - name: Build Docker image
      run: docker build -t my-image:latest .  # 构建 Docker 镜像并标记为 my-image:latest

    # Step 5: 使用 Trivy 扫描 Docker 镜像
    - name: Run Trivy to scan the image for vulnerabilities
      uses: aquasecurity/trivy-action@v0.17.0  # 使用 Trivy 的稳定版本
      with:
        image-ref: my-image:latest
        format: 'table'  # 以表格格式生成扫描报告
        output: trivy-report.txt  # 指定输出文件路径
        exit-code: '0'  # 即使发现漏洞，也不会让工作流失败
        ignore-unfixed: true  # 忽略未修复的漏洞
        vuln-type: 'os,library'  # 扫描操作系统和库中的漏洞
        severity: 'HIGH,CRITICAL'  # 仅报告高危和严重漏洞

    # Step 6: 上传 Trivy 扫描结果
    - name: Upload Trivy scan results
      if: always()  # 无论前一步是否成功，总是执行此步骤
      uses: actions/upload-artifact@v4  # 使用兼容 Node.js 20 的最新版本
      with:
        name: trivy-report  # 上传的文件名
        path: trivy-report.txt  # 要上传的文件路径

    # Step 7: 发送 Slack 通知（可选）
    # - name: Send Slack notification
    #   if: failure()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     fields: repo,message,commit,author
    #     mention: 'here'
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
